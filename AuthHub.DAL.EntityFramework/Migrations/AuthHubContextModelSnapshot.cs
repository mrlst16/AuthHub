// <auto-generated />
using System;
using AuthHub.DAL.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthHub.DAL.EntityFramework.Migrations
{
    [DbContext(typeof(AuthHubContext))]
    partial class AuthHubContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);


            modelBuilder.Entity("AuthHub.Models.Enums.AuthScheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AuthScheme");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2269d512-b2ec-47aa-82bd-ae68df0993f2"),
                            CreateDate = new DateTime(2022, 11, 6, 19, 46, 26, 835, DateTimeKind.Utc).AddTicks(1307),
                            LastUpdated = new DateTime(2022, 11, 6, 19, 46, 26, 835, DateTimeKind.Utc).AddTicks(1308),
                            Name = "JWT",
                            Value = 1
                        });
                });

            modelBuilder.Entity("AuthHub.Models.Organizations.AuthSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthSchemeID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExpirationMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(30);

                    b.Property<int>("HashLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(8);

                    b.Property<string>("Issuer")
                        .HasColumnType("text");

                    b.Property<int>("Iterations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationID")
                        .HasColumnType("uuid");

                    b.Property<int>("PasswordResetTokenExpirationMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<int>("SaltLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(8);

                    b.HasKey("Id");

                    b.HasIndex("AuthSchemeID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("AuthSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("48f46ec0-a09e-4d76-a1d0-385c0c813b1f"),
                            AuthSchemeID = new Guid("2269d512-b2ec-47aa-82bd-ae68df0993f2"),
                            CreateDate = new DateTime(2022, 11, 6, 19, 46, 26, 835, DateTimeKind.Utc).AddTicks(1561),
                            ExpirationMinutes = 120,
                            HashLength = 8,
                            Issuer = "Pawnder",
                            Iterations = 10,
                            Key = "This is my auth key",
                            LastUpdated = new DateTime(2022, 11, 6, 19, 46, 26, 835, DateTimeKind.Utc).AddTicks(1562),
                            Name = "Pawnder JWT",
                            OrganizationID = new Guid("bcb980b4-b5b9-4bd6-9810-569dcd62feca"),
                            PasswordResetTokenExpirationMinutes = 10,
                            SaltLength = 8
                        },
                        new
                        {
                            Id = new Guid("6ce12da2-cb73-4f0b-b9f0-46051621b3c6"),
                            AuthSchemeID = new Guid("2269d512-b2ec-47aa-82bd-ae68df0993f2"),
                            CreateDate = new DateTime(2022, 11, 6, 19, 46, 26, 835, DateTimeKind.Utc).AddTicks(1568),
                            ExpirationMinutes = 120,
                            HashLength = 8,
                            Issuer = "Audder",
                            Iterations = 10,
                            Key = "This is my auth key",
                            LastUpdated = new DateTime(2022, 11, 6, 19, 46, 26, 835, DateTimeKind.Utc).AddTicks(1568),
                            Name = "Audder_Clients",
                            OrganizationID = new Guid("0b674ac4-7079-4ad7-830a-c41cd6ab5204"),
                            PasswordResetTokenExpirationMinutes = 10,
                            SaltLength = 8
                        });
                });

            modelBuilder.Entity("AuthHub.Models.Organizations.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organization");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bcb980b4-b5b9-4bd6-9810-569dcd62feca"),
                            CreateDate = new DateTime(2022, 11, 6, 19, 46, 26, 835, DateTimeKind.Utc).AddTicks(1529),
                            Email = "mattlantz88@gmail.com",
                            LastUpdated = new DateTime(2022, 11, 6, 19, 46, 26, 835, DateTimeKind.Utc).AddTicks(1530),
                            Name = "Pawnder"
                        },
                        new
                        {
                            Id = new Guid("0b674ac4-7079-4ad7-830a-c41cd6ab5204"),
                            CreateDate = new DateTime(2022, 11, 6, 19, 46, 26, 835, DateTimeKind.Utc).AddTicks(1535),
                            Email = "mattlantz88@gmail.com",
                            LastUpdated = new DateTime(2022, 11, 6, 19, 46, 26, 835, DateTimeKind.Utc).AddTicks(1535),
                            Name = "Audder"
                        });
                });

            modelBuilder.Entity("AuthHub.Models.Passwords.ClaimsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClaimsKeyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PasswordId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PasswordId");

                    b.ToTable("ClaimsEntity");
                });

            modelBuilder.Entity("AuthHub.Models.Passwords.ClaimsKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthSettingsId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthSettingsId");

                    b.ToTable("ClaimsKey");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ef019bd-4155-4c25-85d8-5eee7427af8a"),
                            AuthSettingsId = new Guid("48f46ec0-a09e-4d76-a1d0-385c0c813b1f"),
                            CreateDate = new DateTime(2022, 11, 6, 19, 46, 26, 835, DateTimeKind.Utc).AddTicks(1594),
                            IsDefault = false,
                            LastUpdated = new DateTime(2022, 11, 6, 19, 46, 26, 835, DateTimeKind.Utc).AddTicks(1594),
                            Name = "Name"
                        },
                        new
                        {
                            Id = new Guid("6598c3ca-417e-47ed-b796-66f94af855df"),
                            AuthSettingsId = new Guid("48f46ec0-a09e-4d76-a1d0-385c0c813b1f"),
                            CreateDate = new DateTime(2022, 11, 6, 19, 46, 26, 835, DateTimeKind.Utc).AddTicks(1599),
                            IsDefault = false,
                            LastUpdated = new DateTime(2022, 11, 6, 19, 46, 26, 835, DateTimeKind.Utc).AddTicks(1599),
                            Name = "Role"
                        });
                });

            modelBuilder.Entity("AuthHub.Models.Passwords.Password", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Password");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8358a66e-b015-44a6-9cc3-7b5c2b9f1d79"),
                            CreateDate = new DateTime(2022, 11, 6, 19, 46, 26, 835, DateTimeKind.Utc).AddTicks(1658),
                            ExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdated = new DateTime(2022, 11, 6, 19, 46, 26, 835, DateTimeKind.Utc).AddTicks(1659),
                            PasswordHash = new byte[] { 80, 97, 119, 110, 100, 101, 114, 50, 50, 33 },
                            Salt = new byte[] { 91, 156, 7, 89, 255, 32, 9, 14 },
                            UserId = new Guid("b9e2e173-f8c4-41ed-be88-ec1071920130")
                        });
                });

            modelBuilder.Entity("AuthHub.Models.Passwords.PasswordResetToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PasswordResetToken");
                });

            modelBuilder.Entity("AuthHub.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsOrganization")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UsersOrganizationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9e2e173-f8c4-41ed-be88-ec1071920130"),
                            CreateDate = new DateTime(2022, 11, 6, 19, 46, 26, 835, DateTimeKind.Utc).AddTicks(1618),
                            Email = "mattlantz88@gmail.com",
                            FirstName = "Pawnder",
                            IsOrganization = true,
                            LastName = "Organization",
                            LastUpdated = new DateTime(2022, 11, 6, 19, 46, 26, 835, DateTimeKind.Utc).AddTicks(1618),
                            UserName = "Pawnder",
                            UsersOrganizationId = new Guid("0b674ac4-7079-4ad7-830a-c41cd6ab5204")
                        });
                });

            modelBuilder.Entity("AuthSettingsToUsersMap", b =>
                {
                    b.Property<Guid>("AuthSettingsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("AuthSettingsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AuthSettingsToUsersMap");
                });

            modelBuilder.Entity("AuthHub.Models.Organizations.AuthSettings", b =>
                {
                    b.HasOne("AuthHub.Models.Enums.AuthScheme", "AuthScheme")
                        .WithMany()
                        .HasForeignKey("AuthSchemeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthHub.Models.Organizations.Organization", null)
                        .WithMany("Settings")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthScheme");
                });

            modelBuilder.Entity("AuthHub.Models.Passwords.ClaimsEntity", b =>
                {
                    b.HasOne("AuthHub.Models.Passwords.Password", null)
                        .WithMany("Claims")
                        .HasForeignKey("PasswordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthHub.Models.Passwords.ClaimsKey", b =>
                {
                    b.HasOne("AuthHub.Models.Organizations.AuthSettings", null)
                        .WithMany("AvailableClaimsKeys")
                        .HasForeignKey("AuthSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthHub.Models.Passwords.Password", b =>
                {
                    b.HasOne("AuthHub.Models.Users.User", null)
                        .WithOne("Password")
                        .HasForeignKey("AuthHub.Models.Passwords.Password", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthSettingsToUsersMap", b =>
                {
                    b.HasOne("AuthHub.Models.Organizations.AuthSettings", null)
                        .WithMany()
                        .HasForeignKey("AuthSettingsId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_AuthSettingsToUsersMap_AuthSettings_AuthSettingsId");

                    b.HasOne("AuthHub.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_AuthSettingsToUsersMap_Users_UserId");
                });

            modelBuilder.Entity("AuthHub.Models.Organizations.AuthSettings", b =>
                {
                    b.Navigation("AvailableClaimsKeys");
                });

            modelBuilder.Entity("AuthHub.Models.Organizations.Organization", b =>
                {
                    b.Navigation("Settings");
                });

            modelBuilder.Entity("AuthHub.Models.Passwords.Password", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("AuthHub.Models.Users.User", b =>
                {
                    b.Navigation("Password");
                });
#pragma warning restore 612, 618
        }
    }
}
