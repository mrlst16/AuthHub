@using AuthHub.Models.Organizations
@using AuthHub.Models.Enums
@using AuthHub.Models.Passwords
@using AuthHub.WebUI.Connectors
@inject IOrganizationConnector _connector

<div>
    <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label>
            Name:
            <InputText @bind-Value="Model.Name"></InputText>
        </label>
        <label>
            Scheme:
            <InputSelect @bind-Value="Model.AuthScheme">
                @foreach (var scheme in AuthSchemes)
                {
                    if (Model.AuthScheme == scheme)
                    {
                        <option selected="selected" value="@scheme.ToString()">@scheme.ToString()</option>
                    }
                    else
                    {
                        <option value="@scheme.ToString()">@scheme.ToString()</option>
                    }
                }
            </InputSelect>
        </label>
        <br />
        <label>
            Salt Length:
            <InputNumber @bind-Value="Model.SaltLength"></InputNumber>
        </label>
        <br />
        <label>
            Hash Length:
            <InputNumber @bind-Value="Model.HashLength"></InputNumber>
        </label>
        <br />
        <label>
            Iterations:
            <InputNumber @bind-Value="Model.Iterations"></InputNumber>
        </label>
        <br />
        <label>
            Key:
            <InputText @bind-Value="Model.Key"></InputText>
        </label>
        <br />
        <label>
            Expiration in Minutes:
            <InputNumber @bind-Value="Model.ExpirationMinutes"></InputNumber>
        </label>
        <div>
            <h3>Claims Keys</h3>
            <ul>
                @foreach (var key in Model.ClaimsKeys)
                {
                    <li>
                        <span>@key</span>
                        <button @onclick="@(e=> OnRemoveClaimsKeyClick(key.Name))">Remove</button>
                    </li>
                }
            </ul>
            <label>
                New Claim Key
                <InputText @bind-Value="@NewKey"></InputText>
            </label>
            <button name="Add Claim Key" @onclick="@(e=> OnAddClaimsKeyClick())"></button>
        </div>
        <button type="submit">Save</button>
    </EditForm>
</div>

@code {

    [Parameter]
    public AuthSettings Model { get; set; }

    private string NewKey { get; set; }

    private List<AuthSchemeEnum> AuthSchemes = Enum.GetValues<AuthSchemeEnum>().ToList();

    protected override async Task OnInitializedAsync()
    {

    }

    protected void OnRemoveClaimsKeyClick(string key)
    {
        Model.ClaimsKeys = Model.ClaimsKeys.Where(x => x.Name != key).ToList();
        //return new EventCallback();
    }

    protected void OnAddClaimsKeyClick()
    {
        Model.ClaimsKeys.Add(new ClaimsKey()
            {
                Name = NewKey,
                AuthSettingsId = Model.ID
            });
        //return new EventCallback();
    }

    private async Task HandleValidSubmit()
        => await _connector.SaveAuthSettings(Model);
}