@page "/add_user/{AuthSettingsId}"

@using AuthHub.Models.Passwords
@using AuthHub.Models.Users
@using AuthHub.SDK
@using AuthHub.WebUI.Connectors
@using System.Linq
@using System.Collections.ObjectModel

@inject IUserConnector _userConnector;
@inject IClaimsKeyConnector _claimsKeyConnector;

<h3>Add New User</h3>

<div>
    <EditForm Model="@Request" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>

            <label>
                First Name:
                <InputText @bind-Value="@Request.FirstName"></InputText>
            </label>
            <label>
                Last Name:
                <InputText @bind-Value="@Request.LastName"></InputText>
            </label>
        </div>
        <div>
            <label>
                UserName:
                <InputText @bind-Value="@Request.UserName"></InputText>
            </label>
            <label>
                Email:
                <InputText @bind-Value="@Request.Email"></InputText>
            </label>
        </div>
        <div>
            <table>
                <thead>
                    <tr>
                        <th>Key</th>
                        <th>Value</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var claim in UserClaims.Where(x => x.DeletedUTC == null))
                    {
                        <tr>
                            <td>@claim.Key</td>
                            <td>@claim.Value</td>
                            <td>
                                <button type="button" @onclick="@(e=> HandleRemoveClaim(@claim.ID))">Remove</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div>
            @if (DisplayAvailableKeys)
            {
                <div>
                    <span>
                        <InputSelect @bind-Value="SelectedClaimKeyToAdd">
                            @foreach (var key in AvailableKeys)
                            {
                            <option value="@key.ID">@key.Name</option>
                            }
                    </InputSelect>
                </span>
                <label>
                    Value
                    <InputText @bind-Value="SelectedClaimKeyValueToAdd"></InputText>
                </label>
                <button type="button"
                        @onclick="(e=> HandleAddClaim())">
                    Add Claim
                </button>
            </div>
            }
        </div>
        <button type="submit">Save</button>
    </EditForm>
</div>

@code {
    public User Request { get; set; } = new();

    [Parameter]
    public string AuthSettingsId { get; set; }

    protected string SelectedClaimKeyToAdd { get; set; }
    protected string SelectedClaimKeyValueToAdd { get; set; }
    protected ObservableCollection<ClaimsEntity> UserClaims { get; set; }
        = new ObservableCollection<ClaimsEntity>();

    protected List<ClaimsKey> AvailableKeys { get; set; } = new List<ClaimsKey>();
    protected bool DisplayAvailableKeys
    {
        get => AvailableKeys.Any();
    }

    protected async override Task OnInitializedAsync()
    {

        var userClaimsEnumerable = (Request?.Password?.Claims == null)
        ? Request?.Password.Claims.Where(x => x.DeletedUTC == null).ToList()
            : new();
        UserClaims = new ObservableCollection<ClaimsEntity>(userClaimsEnumerable);

        AvailableKeys = Guid.TryParse(AuthSettingsId, out Guid authSettingsId)
                        ? (await _claimsKeyConnector.Get(authSettingsId)).ToList()
                            : new List<ClaimsKey>();
        if (AvailableKeys.Any())
            SelectedClaimKeyToAdd = AvailableKeys.First()?.ID.ToString();
    }

    protected async Task HandleValidSubmit()
    {
        Request.Password.Claims = UserClaims.ToList();
        Request.AuthSettingsId = Guid.TryParse(AuthSettingsId, out Guid id) ? id : Guid.Empty;
        await _userConnector.SaveAsync(Request);
    }

    protected async Task HandleAddClaim()
    {
        if (
            !string.IsNullOrWhiteSpace(SelectedClaimKeyValueToAdd)
            && Guid.TryParse(SelectedClaimKeyToAdd, out Guid claimKeyId)
        )
        {
            bool userAlreadyHasKey = UserClaims.Any(x => x.ClaimsKeyId == claimKeyId && x.DeletedUTC == null);
            if (userAlreadyHasKey) return;

            var claimKey = AvailableKeys.FirstOrDefault(x => x.ID == claimKeyId);
            var claim = new ClaimsEntity()
                {
                    ID = Guid.Empty,
                    ClaimsKeyId = claimKeyId,
                    Key = claimKey.Name,
                    Value = SelectedClaimKeyValueToAdd
                };
            UserClaims.Add(claim);
        }
    }

    protected async Task HandleRemoveClaim(Guid claimsKeyId)
    {
        UserClaims.FirstOrDefault(x => x.ClaimsKeyId != claimsKeyId).DeletedUTC = DateTime.UtcNow;
    }
}
