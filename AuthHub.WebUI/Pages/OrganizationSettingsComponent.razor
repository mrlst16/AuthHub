@page  "/organizationSettings/{organizationId}/{name}"
@using AuthHub.Models.Organizations
@using AuthHub.Models.Enums
@using AuthHub.WebUI.Connectors
@inject IOrganizationConnector _connector

<div>
    <EditForm Model="@model">
        <label>
            Name:
            <InputNumber @bind-Value="model.Name"></InputNumber>
        </label>
        <label>
            Scheme:
            <InputSelect @bind-Value="model.AuthScheme">
                @foreach (var scheme in AuthSchemes)
                {
                    int vale = (int)scheme;
                    if (model.AuthScheme == scheme)
                    {
                        <option selected="selected" value="@scheme.ToString()">@scheme.ToString()</option>
                    }
                    else
                    {
                        <option value="@scheme.ToString()">@scheme.ToString()</option>
                    }
                }
            </InputSelect>
        </label>
        <label>
            Salt Length:
            <InputNumber @bind-Value="model.SaltLength"></InputNumber>
        </label>
        <label>
            Hash Length:
            <InputNumber @bind-Value="model.HashLength"></InputNumber>
        </label>
        <label>
            Iterations:
            <InputNumber @bind-Value="model.Iterations"></InputNumber>
        </label>
        <label>
            Key:
            <InputText @bind-Value="model.Key"></InputText>
        </label>
        <label>
            Expiration in Minutes:
            <InputNumber @bind-Value="model.ExpirationMinutes"></InputNumber>
        </label>
        <div>
            <h3>Claims Keys</h3>
            <ul>
                @foreach (var key in model.ClaimsKeys)
                {
                    <li>
                        <span>@key</span>
                        <button @onclick="@OnRemoveClaimsKeyClick(key)">Remove</button>
                    </li>
                }
            </ul>
            <label>
                New Claim Key
                <InputText @bind-Value="@NewKey"></InputText>
            </label>
            <button name="Add Claim Key"></button>
        </div>
        <button type="submit">Save</button>
    </EditForm>
</div>

@code {

    AuthSettings model = null;
    [Parameter]
    public Guid OrganizationID { get; set; }

    [Parameter]
    public string Name { get; set; }

    private string NewKey { get; set; }

    private List<AuthSchemeEnum> AuthSchemes = Enum.GetValues<AuthSchemeEnum>().ToList();

    protected override async Task OnInitializedAsync()
    {
        model = await _connector.GetAuthSettings(OrganizationID, Name) ?? new AuthSettings();

    }

    protected EventCallback OnRemoveClaimsKeyClick(string key)
    {
        model.ClaimsKeys.Remove(key);
        return new EventCallback();
    }

    protected EventCallback OnAddClaimsKeyClick()
    {
        model.ClaimsKeys.Add(NewKey);
        return new EventCallback();
    }

    private async Task HandleValidSubmit()
        => await _connector.MergeAuthSettings(model);
}